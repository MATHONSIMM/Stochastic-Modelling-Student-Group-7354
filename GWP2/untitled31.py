# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i2oAprLpCTZk7LTK0KnfNPCD6kQa78JK
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

"""Step 1, Member B: Data Fetch for MSFT"""

# Fetch Microsoft data from 2019 to the end of September 2022
msft = yf.Ticker("MSFT")
data = msft.history(start="2019-01-01", end="2022-09-30")

# Calculate daily returns
data['Returns'] = data['Close'].pct_change()

# Display the first few rows
print(data[['Close', 'Returns']].head())

"""Step 2, Member B: Data Visualization for MSFT"""

# Plot closing prices
plt.figure(figsize=(14, 6))
plt.plot(data.index, data['Close'], label='Closing Prices')
plt.title('Microsoft Closing Prices (2019-2022)')
plt.xlabel('Date')
plt.ylabel('Price')
plt.grid(True)
plt.legend()
plt.show()

# Plot returns
plt.figure(figsize=(14, 6))
plt.plot(data.index, data['Returns'], label='Daily Returns')
plt.title('Microsoft Daily Returns (2019-2022)')
plt.xlabel('Date')
plt.ylabel('Returns')
plt.grid(True)
plt.legend()
plt.show()

"""Step 2, Member B: Markov-Regime Switching Model"""

from statsmodels.tsa.regime_switching.markov_regression import MarkovRegression

# Model with 2 states
model_2_states = MarkovRegression(data['Returns'].dropna(), k_regimes=2, trend='c', switching_variance=True)
result_2_states = model_2_states.fit()
print(result_2_states.summary())

model_diff_mu = MarkovRegression(data['Returns'].dropna(), k_regimes=2, trend='c', switching_variance=False)
result_diff_mu = model_diff_mu.fit()
print(result_diff_mu.summary())

model_diff_sigma = MarkovRegression(data['Returns'].dropna(), k_regimes=2, trend='n', switching_variance=True) # Changed trend to 'n'
result_diff_sigma = model_diff_sigma.fit()
print(result_diff_sigma.summary())

model_diff_mu_sigma = MarkovRegression(data['Returns'].dropna(), k_regimes=2, trend='c', switching_variance=True)
result_diff_mu_sigma = model_diff_mu_sigma.fit()
print(result_diff_mu_sigma.summary())

"""Step 3, Member B: Comparing Models with Different Sigma Values"""

from sklearn.preprocessing import StandardScaler
data['Returns'] = data['Close'].pct_change().dropna()

# Check for and handle any NaN values
data = data.dropna()

# Normalize the returns
scaler = StandardScaler()
data['Normalized_Returns'] = scaler.fit_transform(data['Returns'].values.reshape(-1, 1))

# Model with different sigmas (variance switching)
try:
    model_diff_sigma = MarkovRegression(data['Normalized_Returns'], k_regimes=2, trend='c', switching_variance=True)
    result_diff_sigma = model_diff_sigma.fit()
    print("Model with Different Sigmas:")
    print(result_diff_sigma.summary())
    print(f"AIC: {result_diff_sigma.aic}, BIC: {result_diff_sigma.bic}")
except np.linalg.LinAlgError:
    print("Model with different sigmas failed to converge.")

# Model with constant sigma (no variance switching)
try:
    model_const_sigma = MarkovRegression(data['Normalized_Returns'], k_regimes=2, trend='c', switching_variance=False)
    result_const_sigma = model_const_sigma.fit()
    print("\nModel with Constant Sigma:")
    print(result_const_sigma.summary())
    print(f"AIC: {result_const_sigma.aic}, BIC: {result_const_sigma.bic}")
except np.linalg.LinAlgError:
    print("Model with constant sigma failed to converge.")