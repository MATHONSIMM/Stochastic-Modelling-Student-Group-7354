{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from scipy.integrate import quad\n","from scipy.optimize import minimize, brute, fmin\n","import matplotlib.pyplot as plt"],"metadata":{"id":"39qkEtao9Tyq","executionInfo":{"status":"ok","timestamp":1728603608879,"user_tz":-120,"elapsed":482,"user":{"displayName":"Mphikeleli Mbongiseni","userId":"18167562099187738208"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["1a) Student A"],"metadata":{"id":"8u4lKtqp9kzI"}},{"cell_type":"code","source":["# Load the option data\n","data = pd.read_excel('/content/MScFE 622_Stochastic Modeling_GWP1_Option data.xlsx')\n","\n","# Define constants\n","S0 = 232.90  # Current stock price\n","r = 0.015    # Risk-free rate\n","T = 15 / 250  # Maturity in years (15 days)\n","\n","# Select only the relevant data for 15 days to maturity\n","call_data = data[(data['Days to maturity'] == 15) & (data['Type'] == 'C')]\n","put_data = data[(data['Days to maturity'] == 15) & (data['Type'] == 'P')]\n","\n","strike_prices = call_data['Strike'].values\n","call_prices = call_data['Price'].values\n","put_strike_prices = put_data['Strike'].values\n","put_prices = put_data['Price'].values\n","\n","# Heston model function to calculate call prices\n","def heston_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho):\n","    def H93_char_func(u, T, r, kappa_v, theta_v, sigma_v, rho, v0):\n","      \"\"\"Valuation of European call option in H93 model via Lewis (2001)\n","      Fourier-based approach: characteristic function.\n","      Parameter definitions see function BCC_call_value.\"\"\"\n","      c1 = kappa_v * theta_v\n","      c2 = -np.sqrt(\n","          (rho * sigma_v * u * 1j - kappa_v) ** 2 - sigma_v**2 * (-u * 1j - u**2)\n","      )\n","      c3 = (kappa_v - rho * sigma_v * u * 1j + c2) / (\n","          kappa_v - rho * sigma_v * u * 1j - c2\n","      )\n","      H1 = r * u * 1j * T + (c1 / sigma_v**2) * (\n","          (kappa_v - rho * sigma_v * u * 1j + c2) * T\n","          - 2 * np.log((1 - c3 * np.exp(c2 * T)) / (1 - c3))\n","      )\n","      H2 = (\n","          (kappa_v - rho * sigma_v * u * 1j + c2)\n","          / sigma_v**2\n","          * ((1 - np.exp(c2 * T)) / (1 - c3 * np.exp(c2 * T)))\n","      )\n","      char_func_value = np.exp(H1 + H2 * v0)\n","      return char_func_value\n","\n","    def H93_int_func(u, S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0):\n","      \"\"\"\n","      Fourier-based approach for Lewis (2001): Integration function.\n","      \"\"\"\n","      char_func_value = H93_char_func(\n","          u - 1j * 0.5, T, r, kappa_v, theta_v, sigma_v, rho, v0\n","      )\n","      int_func_value = (\n","          1 / (u**2 + 0.25) * (np.exp(1j * u * np.log(S0 / K)) * char_func_value).real\n","      )\n","      return int_func_value\n","\n","    def H93_call_value(S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0):\n","      \"\"\"Valuation of European call option in H93 model via Lewis (2001)\n","\n","      Parameter definition:\n","      ==========\n","      S0: float\n","          initial stock/index level\n","      K: float\n","          strike price\n","      T: float\n","          time-to-maturity (for t=0)\n","      r: float\n","          constant risk-free short rate\n","      kappa_v: float\n","          mean-reversion factor\n","      theta_v: float\n","          long-run mean of variance\n","      sigma_v: float\n","          volatility of variance\n","      rho: float\n","          correlation between variance and stock/index level\n","      v0: float\n","          initial level of variance\n","      Returns\n","      =======\n","      call_value: float\n","          present value of European call option\n","      \"\"\"\n","      int_value = quad(\n","          lambda u: H93_int_func(u, S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0),\n","          0,\n","          np.inf,\n","          limit=250,\n","      )[0]\n","      call_value = max(0, S0 - np.exp(-r * T) * np.sqrt(S0 * K) / np.pi * int_value)\n","      return call_value\n","\n","    return H93_call_value(S0, K, T, r, kappa, theta, sigma, rho, v0)\n","\n","# Heston model function to calculate put prices\n","def heston_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho):\n","    price = heston_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho)\n","    put_price = price + K * np.exp(-r*T) - S0\n","    return put_price\n","i = 0\n","min_MSE = 500\n","\n","# Objective function to minimize\n","def objective(params):\n","    global i, min_MSE\n","    v0, theta, kappa, sigma, rho = params\n","\n","    # Ensure parameter constraints are met\n","    if kappa < 0.0 or theta < 0.005 or sigma < 0.0 or rho < -1.0 or rho > 1.0:\n","        return 500.0\n","    if 2 * kappa * theta < sigma ** 2:  # Feller condition for variance process\n","        return 500.0\n","\n","    # List to store squared errors\n","    se = []\n","    for i, K in enumerate(strike_prices):\n","        model_call_price = heston_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho)\n","        model_put_price = heston_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho)\n","        # Calculate squared error for this strike price\n","        se.append((call_prices[i] - model_call_price) ** 2)\n","        se.append((put_prices[i] - model_put_price) ** 2)\n","\n","    # Mean Squared Error (MSE)\n","    mse = np.mean(se)\n","    return mse\n","\n","# Run optimization\n","def H93_calibration_full():\n","    \"\"\"Calibrates Heston (1993) stochastic volatility model to market quotes.\"\"\"\n","    # First run with brute force\n","    # (scan sensible regions, for faster convergence)\n","    p0 = brute(\n","        objective,\n","        (\n","            (2.5, 10.6, 5.0),  # kappa_v\n","            (0.01, 0.041, 0.01),  # theta_v\n","            (0.05, 0.251, 0.1),  # sigma_v\n","            (-0.75, 0.01, 0.25),  # rho\n","            (0.01, 0.031, 0.01),\n","        ),  # v0\n","        finish=None,\n","    )\n","\n","    # Second run with local, convex minimization\n","    # (we dig deeper where promising results)\n","    opt = fmin(\n","        objective, p0, xtol=0.000001, ftol=0.000001, maxiter=750, maxfun=900\n","    )\n","    return opt\n","\n","# result = minimize(objective, initial_params, bounds=((0, 1), (0, 1), (0, 10), (0, 1), (-1, 0)))\n","calibrated_params = H93_calibration_full()\n","\n","# Display calibrated parameters\n","print(\"Calibrated Parameters:\")\n","print(f\"v0: {calibrated_params[0]}, theta: {calibrated_params[1]}, kappa: {calibrated_params[2]}, sigma: {calibrated_params[3]}, rho: {calibrated_params[4]}\")\n","\n","# Calculate model call and put prices\n","model_call_prices = [heston_call_price(S0, K, T, r, *calibrated_params) for K in strike_prices]\n","model_put_prices = [heston_put_price(S0, K, T, r, *calibrated_params) for K in put_strike_prices]\n","\n","# Print call and put prices\n","print(\"\\nMarket vs Model Call Prices:\")\n","for K, market, model in zip(strike_prices, call_prices, model_call_prices):\n","    print(f\"Strike: {K}, Market Call: {market}, Model Call: {model}\")\n","\n","print(\"\\nMarket vs Model Put Prices:\")\n","for K, market, model in zip(put_strike_prices, put_prices, model_put_prices):\n","    print(f\"Strike: {K}, Market Put: {market}, Model Put: {model}\")\n","\n","# Graphical representation\n","fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n","\n","# Call Prices\n","axes[0].scatter(strike_prices, call_prices, label='Market Call Prices', color='blue')\n","axes[0].scatter(strike_prices, model_call_prices, label='Model Call Prices', color='red', linestyle=\"-\", marker='o')\n","axes[0].set_title('Market vs Model Call Prices')\n","axes[0].set_xlabel('Strike Price')\n","axes[0].set_ylabel('Call Price')\n","axes[0].legend()\n","\n","# Put Prices\n","axes[1].scatter(strike_prices, put_prices, label='Market Put Prices', color='blue')\n","axes[1].scatter(strike_prices, model_put_prices, label='Model Put Prices', color='red', linestyle=\"-\", marker='o')\n","axes[1].set_title('Market vs Model Put Prices')\n","axes[1].set_xlabel('Strike Price')\n","axes[1].set_ylabel('Put Price')\n","axes[1].legend()\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"5wVT8wtD9lyM","executionInfo":{"status":"ok","timestamp":1728593125638,"user_tz":-60,"elapsed":97675,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"922dcc4e-d2ba-419b-bed3-c38f9c89d895"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-34-3eed90357103>:31: RuntimeWarning: divide by zero encountered in scalar divide\n","  H1 = r * u * 1j * T + (c1 / sigma_v**2) * (\n","<ipython-input-34-3eed90357103>:31: RuntimeWarning: invalid value encountered in scalar multiply\n","  H1 = r * u * 1j * T + (c1 / sigma_v**2) * (\n","<ipython-input-34-3eed90357103>:36: RuntimeWarning: invalid value encountered in scalar divide\n","  (kappa_v - rho * sigma_v * u * 1j + c2)\n","<ipython-input-34-3eed90357103>:83: IntegrationWarning: The occurrence of roundoff error is detected, which prevents \n","  the requested tolerance from being achieved.  The error may be \n","  underestimated.\n","  int_value = quad(\n","<ipython-input-34-3eed90357103>:83: IntegrationWarning: The maximum number of subdivisions (250) has been achieved.\n","  If increasing the limit yields no improvement it is advised to analyze \n","  the integrand in order to determine the difficulties.  If the position of a \n","  local difficulty can be determined (singularity, discontinuity) one will \n","  probably gain from splitting up the interval and calling the integrator \n","  on the subranges.  Perhaps a special-purpose integrator should be used.\n","  int_value = quad(\n"]},{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 0.521383\n","         Iterations: 105\n","         Function evaluations: 380\n","Calibrated Parameters:\n","v0: 2.5000002220294117, theta: 0.010000000472468289, kappa: 0.04999999750821559, sigma: 7.207641348173842e-11, rho: 0.00999999937808347\n","\n","Market vs Model Call Prices:\n","Strike: 227.5, Market Call: 10.52, Model Call: 9.592074937598369\n","Strike: 230.0, Market Call: 10.05, Model Call: 8.210524936308445\n","Strike: 232.5, Market Call: 7.75, Model Call: 6.925832356994931\n","Strike: 235.0, Market Call: 6.01, Model Call: 5.736786844774969\n","Strike: 237.5, Market Call: 4.75, Model Call: 4.641754135921417\n","\n","Market vs Model Put Prices:\n","Strike: 227.5, Market Put: 4.32, Model Put: 3.987417047463339\n","Strike: 230.0, Market Put: 5.2, Model Put: 5.103618058369733\n","Strike: 232.5, Market Put: 6.45, Model Put: 6.316676491252537\n","Strike: 235.0, Market Put: 7.56, Model Put: 7.625381991228892\n","Strike: 237.5, Market Put: 8.78, Model Put: 9.028100294571658\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["1b) Student B"],"metadata":{"id":"C0ukLI-Y91lR"}},{"cell_type":"markdown","source":["Carr-Madan Pricing Approach"],"metadata":{"id":"uF2_i9-2987W"}},{"cell_type":"code","source":["# Import values found from previous model:\n","v0, theta, kappa, sigma, rho = calibrated_params"],"metadata":{"id":"cv8SEKMkVEyt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def carr_madan_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta):\n","    \"\"\"\n","    Pricing a call option using the Carr-Madan method with Bates (1996) stochastic volatility\n","    and jumps model, including Heston (1993) dynamics with jumps.\n","    \"\"\"\n","\n","    def H93_char_func(u, T, r, kappa, theta, sigma, rho, v0):\n","        \"\"\"\n","        Characteristic function for the Heston (1993) model.\n","        \"\"\"\n","        c1 = kappa * theta\n","        c2 = -np.sqrt((rho * sigma * u * 1j - kappa) ** 2 - sigma ** 2 * (-u * 1j - u ** 2))\n","        c3 = (kappa - rho * sigma * u * 1j + c2) / (kappa - rho * sigma * u * 1j - c2)\n","\n","        H1 = r * u * 1j * T + (c1 / sigma ** 2) * (\n","            (kappa - rho * sigma * u * 1j + c2) * T - 2 * np.log((1 - c3 * np.exp(c2 * T)) / (1 - c3))\n","        )\n","\n","        H2 = (kappa - rho * sigma * u * 1j + c2) / sigma ** 2 * (\n","            (1 - np.exp(c2 * T)) / (1 - c3 * np.exp(c2 * T))\n","        )\n","\n","        return np.exp(H1 + H2 * v0)\n","\n","    def M76J_char_func(u, T, lamb, mu, delta):\n","        \"\"\"\n","        Characteristic function for the jump component from Merton (1976) model.\n","        \"\"\"\n","        omega = -lamb * (np.exp(mu + 0.5 * delta ** 2) - 1)\n","        return np.exp((1j * u * omega + lamb * (np.exp(1j * u * mu - u ** 2 * delta ** 2 * 0.5) - 1)) * T)\n","\n","    def B96_char_func(u, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta):\n","        \"\"\"\n","        Bates (1996) characteristic function combining Heston and Merton (jumps).\n","        \"\"\"\n","        H93 = H93_char_func(u, T, r, kappa, theta, sigma, rho, v0)\n","        M76J = M76J_char_func(u, T, lamb, mu, delta)\n","        return H93 * M76J\n","\n","    def B96_call_FFT(S0, K, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta):\n","        \"\"\"\n","        Bates (1996) call option price using the Fast Fourier Transform (FFT).\n","        \"\"\"\n","        k = np.log(K / S0)\n","        g = 1  # Accuracy factor\n","        N = g * 4096\n","        eps = (g * 150) ** -1\n","        eta = 2 * np.pi / (N * eps)\n","        b = 0.5 * N * eps - k\n","        u = np.arange(1, N + 1, 1)\n","        vo = eta * (u - 1)\n","\n","        # Modifications for integrability\n","        if S0 >= 0.95 * K:  # In-the-money (ITM) case\n","            alpha = 1.5\n","            v = vo - (alpha + 1) * 1j\n","            modcharFunc = np.exp(-r * T) * (\n","                B96_char_func(v, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta)\n","                / (alpha ** 2 + alpha - vo ** 2 + 1j * (2 * alpha + 1) * vo)\n","            )\n","        else:\n","            alpha = 1.1\n","            v = vo - 1j * alpha - 1j\n","            modcharFunc1 = np.exp(-r * T) * (\n","                1 / (1 + 1j * (vo - 1j * alpha))\n","                - np.exp(r * T) / (1j * (vo - 1j * alpha))\n","                - B96_char_func(v, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta)\n","                / ((vo - 1j * alpha) ** 2 - 1j * (vo - 1j * alpha))\n","            )\n","\n","            v = vo + 1j * alpha - 1j\n","            modcharFunc2 = np.exp(-r * T) * (\n","                1 / (1 + 1j * (vo + 1j * alpha))\n","                - np.exp(r * T) / (1j * (vo + 1j * alpha))\n","                - B96_char_func(v, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta)\n","                / ((vo + 1j * alpha) ** 2 - 1j * (vo + 1j * alpha))\n","            )\n","\n","        # Numerical FFT routine\n","        delt = np.zeros(N)\n","        delt[0] = 1\n","        j = np.arange(1, N + 1, 1)\n","        SimpsonW = (3 + (-1) ** j - delt) / 3\n","\n","        if S0 >= 0.95 * K:\n","            FFTFunc = np.exp(1j * b * vo) * modcharFunc * eta * SimpsonW\n","            payoff = np.fft.fft(FFTFunc).real\n","            CallValueM = np.exp(-alpha * k) / np.pi * payoff\n","        else:\n","            FFTFunc = np.exp(1j * b * vo) * (modcharFunc1 - modcharFunc2) * 0.5 * eta * SimpsonW\n","            payoff = np.fft.fft(FFTFunc).real\n","            CallValueM = payoff / (np.sinh(alpha * k) * np.pi)\n","\n","        pos = int((k + b) / eps)\n","        CallValue = CallValueM[pos] * S0\n","\n","        return CallValue\n","\n","    return B96_call_FFT(S0, K, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta)\n","\n","\n","def carr_madan_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta):\n","  price = carr_madan_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","  put_price = price + K * np.exp(-r*T) - S0\n","  return put_price\n","\n","i = 0\n","min_MSE = 5000.0\n","local_opt = False\n","\n","def B96_error_function(p0):\n","  \"\"\"\n","  Error function for Bates (1996) model\n","\n","  Parameters:\n","  -------------\n","  lamb: float\n","      jump intensity\n","  mu: float\n","      expected jump size\n","  delta: float\n","      standard deviation of jump\n","  Returns\n","  -------------\n","  MSE: float\n","      mean squared error\n","  \"\"\"\n","\n","  global i, min_MSE, local_opt, opt1\n","  lamb, mu, delta = p0\n","  if lamb < 0.0 or mu < -0.6 or mu > 0.0 or delta < 0.0:\n","      return 5000.0\n","  se = []\n","  for i, K in enumerate(strike_prices):\n","        model_call_price = carr_madan_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        model_put_price = carr_madan_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        se.append((call_prices[i] - model_call_price) ** 2)\n","        se.append((put_prices[i] - model_put_price) ** 2)\n","  MSE = sum(se) / len(se)\n","  min_MSE = min(min_MSE, MSE)\n","  i += 1\n","  if local_opt:\n","      penalty = np.sqrt(np.sum((p0 - opt1) ** 2)) * 1\n","      return MSE + penalty\n","  return MSE\n","\n","def B96_calibration_short():\n","    \"\"\"\n","    Calibrates jump component of Bates (1996) model to market prices\n","    \"\"\"\n","    # First, we run with brute force\n","    # (scan sensible regions)\n","    opt1 = 0.0\n","    opt1 = brute(\n","        B96_error_function,\n","        (\n","            (0.0, 0.51, 0.1),  # lambda\n","            (-0.5, -0.11, 0.1),  # mu\n","            (0.0, 0.51, 0.25),\n","        ),  # delta\n","        finish=None,\n","    )\n","\n","    # Second, we run with local, convex minimization\n","    # (dig deeper where promising)\n","    opt2 = fmin(\n","        B96_error_function,\n","        opt1,\n","        xtol=0.0000001,\n","        ftol=0.0000001,\n","        maxiter=550,\n","        maxfun=750,\n","    )\n","    return opt2"],"metadata":{"id":"6wzAcXCb9-lw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Obtain initial jump model values\n","params = B96_calibration_short()\n","lamb, mu, delta = params\n","print(f\"lamb: {lamb}\\nmu: {mu}\\ndelta: {delta}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8co0bBveU1Ta","executionInfo":{"status":"ok","timestamp":1728597631898,"user_tz":-60,"elapsed":4796,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"daf4e033-a3cc-470b-c046-7589b7f3c0e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 768.229519\n","         Iterations: 57\n","         Function evaluations: 170\n","lamb: 0.0\n","mu: -0.5\n","delta: 0.0\n"]}]},{"cell_type":"code","source":["p0 = [kappa, theta, sigma, rho, v0, lamb, mu, delta]\n","def carr_full_error_function(p0):\n","    global i, min_MSE\n","    kappa, theta, sigma, rho, v0, lamb, mu, delta = p0\n","\n","    if (\n","        kappa < 0.0\n","        or theta < 0.005\n","        or sigma < 0.0\n","        or rho < -1.0\n","        or rho > 1.0\n","        or v0 < 0.0\n","        or lamb < 0.0\n","        or mu < -0.6\n","        or mu > 0.0\n","        or delta < 0.0\n","    ):\n","        return 5000.0\n","\n","    if 2 * kappa * theta < sigma**2:\n","        return 5000.0\n","\n","    se = []\n","    for i, K in enumerate(strike_prices):\n","        model_call_price = carr_madan_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        model_put_price = carr_madan_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        se.append((call_prices[i] - model_call_price) ** 2)\n","        se.append((put_prices[i] - model_put_price) ** 2)\n","\n","    MSE = sum(se) / len(se)\n","    min_MSE = min(min_MSE, MSE)\n","    if i % 25 == 0:\n","        print(\"%4d |\" % i, np.array(p0), \"| %7.3f | %7.3f\" % (MSE, min_MSE))\n","    i += 1\n","    return MSE\n","\n","def B96_calibration_full():\n","    opt = fmin(\n","        carr_full_error_function, p0, xtol=0.001, ftol=0.001, maxiter=1250, maxfun=650\n","    )\n","    return opt\n","\n","\n","def B96_calculate_model_values(p0):\n","    kappa, theta, sigma, rho, v0, lamb, mu, delta = p0\n","    values = []\n","    for i, K in enumerate(strike_prices):\n","        model_value = carr_madan_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        values.append(model_value)\n","\n","    return np.array(values)"],"metadata":{"id":"kgf5ii1ZY9qi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["full_params = B96_calibration_full()\n","kappa, theta, sigma, rho, v0, lamb, mu, delta = full_params\n","print(f\"kappa: {kappa}, theta: {theta}, sigma: {sigma}, rho: {rho}, v0: {v0}, lamb: {lamb}, mu: {mu}, delta: {delta}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vk9M7AAhcN9I","executionInfo":{"status":"ok","timestamp":1728599679145,"user_tz":-60,"elapsed":13169,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"84235d8e-d6bc-4bb4-cb9a-3ec954f7e835"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 871.686564\n","         Iterations: 176\n","         Function evaluations: 411\n","kappa: 0.05341584286429616, theta: 0.010300120752904797, sigma: 7.675901607086168e-11, rho: 0.009875636406468446, v0: 2.108273314389516, lamb: 0.00026334657686384664, mu: -0.4832251403971083, delta: 0.00014294437329198052\n"]}]},{"cell_type":"code","source":["# Graphical representation\n","fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n","\n","# Call Prices\n","axes[0].scatter(strike_prices, call_prices, label='Market Call Prices', color='blue')\n","axes[0].scatter(strike_prices, model_call_prices, label='Model Call Prices', color='red', linestyle=\"-\", marker='o')\n","axes[0].set_title('Market vs Model Call Prices')\n","axes[0].set_xlabel('Strike Price')\n","axes[0].set_ylabel('Call Price')\n","axes[0].legend()\n","\n","# Put Prices\n","axes[1].scatter(strike_prices, put_prices, label='Market Put Prices', color='blue')\n","axes[1].scatter(strike_prices, model_put_prices, label='Model Put Prices', color='red', linestyle=\"-\", marker='o')\n","axes[1].set_title('Market vs Model Put Prices')\n","axes[1].set_xlabel('Strike Price')\n","axes[1].set_ylabel('Put Price')\n","axes[1].legend()\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"ddgnaIjterrg","executionInfo":{"status":"ok","timestamp":1728598166881,"user_tz":-60,"elapsed":2009,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"d0097796-3772-4e83-a28b-cc8ad4eb7f58"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["1c) Student C"],"metadata":{"id":"yURIzLa7-Hbu"}},{"cell_type":"code","source":["# Parameters for the Asian call option\n","S0 = 232.90  # Current stock price\n","K = S0       # ATM strike price\n","T_days = 20  # Maturity in days\n","T = T_days / 250  # Convert days to years\n","num_simulations = 10000  # Number of Monte Carlo simulations\n","dt = T / 250  # Time increment for daily steps\n","n_steps = T_days  # Number of time steps\n","\n","# Function to simulate stock price paths\n","def simulate_heston(S0, v0, theta, kappa, sigma, rho, n_steps, dt):\n","    # Initialize arrays\n","    S_paths = np.zeros((n_steps + 1, num_simulations))\n","    v_paths = np.zeros((n_steps + 1, num_simulations))\n","\n","    # Set initial values\n","    S_paths[0] = S0\n","    v_paths[0] = v0\n","\n","    for t in range(1, n_steps + 1):\n","        # Generate random numbers\n","        Z1 = np.random.normal(size=num_simulations)\n","        Z2 = np.random.normal(size=num_simulations)\n","\n","        # Correlated random variable\n","        Z2 = rho * Z1 + np.sqrt(1 - rho**2) * Z2\n","\n","        # Update volatility\n","        v_paths[t] = np.maximum(v_paths[t-1] + kappa * (theta - v_paths[t-1]) * dt + sigma * np.sqrt(v_paths[t-1]) * np.sqrt(dt) * Z1, 0)\n","\n","        # Update stock price\n","        S_paths[t] = S_paths[t-1] * np.exp((r - 0.5 * v_paths[t-1]) * dt + np.sqrt(v_paths[t-1]) * np.sqrt(dt) * Z2)\n","\n","    return S_paths\n","\n","# Simulate stock price paths\n","S_paths = simulate_heston(S0, v0, theta, kappa, sigma, rho, n_steps, dt)\n","\n","# Calculate the average stock price for each path\n","average_prices = np.mean(S_paths, axis=0)\n","\n","# Calculate the payoff for each simulation\n","payoffs = np.maximum(average_prices - K, 0)\n","\n","# Discount the payoffs to present value\n","option_price = np.exp(-r * T) * np.mean(payoffs)\n","\n","# Include the bank's fee (4%)\n","final_price = option_price * 1.04\n","\n","# Display the results\n","print(f\"Fair Price of the Asian Call Option: ${option_price:.2f}\")\n","print(f\"Final Price to the Client (including fee): ${final_price:.2f}\")"],"metadata":{"id":"3Ags_Gs7-I29","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728598592100,"user_tz":-60,"elapsed":220,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"de96a4fa-1c89-4f28-abbb-895e67239b39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fair Price of the Asian Call Option: $6.26\n","Final Price to the Client (including fee): $6.51\n"]}]},{"cell_type":"markdown","source":["Step 2"],"metadata":{"id":"ZGqekX6I-Rno"}},{"cell_type":"markdown","source":["2a. Student C"],"metadata":{"id":"vc3qrJqi-YnE"}},{"cell_type":"code","source":["# Time is now 60 days\n","T = 60/250\n","\n","# Select only the relevant data for 60 days to maturity\n","call_data = data[(data['Days to maturity'] == 60) & (data['Type'] == 'C')]\n","put_data = data[(data['Days to maturity'] == 60) & (data['Type'] == 'P')]\n","\n","strike_prices = call_data['Strike'].values\n","call_prices = call_data['Price'].values\n","put_strike_prices = put_data['Strike'].values\n","put_prices = put_data['Price'].values"],"metadata":{"id":"aBPVyPKXvnFL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bates model pricing function\n","def bates_error_function(p0):\n","    global i, min_MSE, local_opt, opt1\n","    lamb, mu, delta = p0\n","    if lamb < 0.0 or mu < -0.6 or mu > 0.0 or delta < 0.0:\n","        return 5000.0\n","\n","    se = []  # Squared errors for both calls and puts\n","    for i, K in enumerate(strike_prices):\n","        model_call_price = bates_call_value(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        model_put_price = bates_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        se.append((call_prices[i] - model_call_price) ** 2)\n","        se.append((put_prices[i] - model_put_price) ** 2)\n","\n","    MSE = sum(se) / len(se)\n","    min_MSE = min(min_MSE, MSE)\n","\n","    if i % 25 == 0:\n","        print(f\"{i:4d} | {np.array(p0)} | {MSE:.3f} | {min_MSE:.3f}\")\n","\n","    if local_opt:\n","        penalty = np.sqrt(np.sum((p0 - opt1) ** 2)) * 1\n","        return MSE + penalty\n","\n","    return MSE\n","\n","# Bates call option value calculation\n","def bates_call_value(S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta):\n","    int_value = quad(\n","        lambda u: B96_int_func(\n","            u, S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta\n","        ),\n","        0,\n","        np.inf,\n","        limit=250,\n","    )[0]\n","    call_value = max(0, S0 - np.exp(-r * T) * np.sqrt(S0 * K) / np.pi * int_value)\n","    return call_value\n","\n","# Bates put option price calculation (Put-Call parity)\n","def bates_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta):\n","    call_price = bates_call_value(S0, K, T, r, kappa, theta, sigma, rho, v0, lamb, mu, delta)\n","    put_price = call_price + K * np.exp(-r * T) - S0\n","    return put_price\n","\n","# Heston 93 Characteristic function (used in Bates model)\n","def H93_char_func(u, T, r, kappa_v, theta_v, sigma_v, rho, v0):\n","    c1 = kappa_v * theta_v\n","    c2 = -np.sqrt(\n","        (rho * sigma_v * u * 1j - kappa_v) ** 2 - sigma_v**2 * (-u * 1j - u**2)\n","    )\n","    c3 = (kappa_v - rho * sigma_v * u * 1j + c2) / (\n","        kappa_v - rho * sigma_v * u * 1j - c2\n","    )\n","    H1 = r * u * 1j * T + (c1 / sigma_v**2) * (\n","        (kappa_v - rho * sigma_v * u * 1j + c2) * T\n","        - 2 * np.log((1 - c3 * np.exp(c2 * T)) / (1 - c3))\n","    )\n","    H2 = (\n","        (kappa_v - rho * sigma_v * u * 1j + c2)\n","        / sigma_v**2\n","        * ((1 - np.exp(c2 * T)) / (1 - c3 * np.exp(c2 * T)))\n","    )\n","    char_func_value = np.exp(H1 + H2 * v0)\n","    return char_func_value\n","\n","# Merton 76 Jump Component Characteristic Function\n","def M76J_char_func(u, T, lamb, mu, delta):\n","    omega = -lamb * (np.exp(mu + 0.5 * delta**2) - 1)\n","    char_func_value = np.exp(\n","        (1j * u * omega + lamb * (np.exp(1j * u * mu - u**2 * delta**2 * 0.5) - 1))\n","        * T\n","    )\n","    return char_func_value\n","\n","# Bates (1996) Characteristic Function\n","def B96_char_func(u, T, r, kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta):\n","    H93 = H93_char_func(u, T, r, kappa_v, theta_v, sigma_v, rho, v0)\n","    M76J = M76J_char_func(u, T, lamb, mu, delta)\n","    return H93 * M76J\n","\n","# Bates (1996) Integral Function for FFT\n","def B96_int_func(u, S0, K, T, r, kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta):\n","    char_func_value = B96_char_func(\n","        u - 1j * 0.5, T, r, kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta\n","    )\n","    int_func_value = (\n","        1 / (u**2 + 0.25) * (np.exp(1j * u * np.log(S0 / K)) * char_func_value).real\n","    )\n","    return int_func_value\n","\n","# Bates Model Calibration\n","def bates_calibration_short():\n","    global opt1\n","    opt1 = brute(\n","        bates_error_function,\n","        (\n","            (0.0, 0.51, 0.1),  # lambda\n","            (-0.5, -0.11, 0.1),  # mu\n","            (0.0, 0.51, 0.25),  # delta\n","        ),\n","        finish=None,\n","    )\n","\n","    # Second run with local optimization for refinement\n","    opt2 = fmin(\n","        bates_error_function,\n","        opt1,\n","        xtol=1e-7,\n","        ftol=1e-7,\n","        maxiter=550,\n","        maxfun=750,\n","    )\n","    return opt2\n","\n","# Calibrate Bates model\n","bates_params = bates_calibration_short()\n"],"metadata":{"id":"356XJbuK-fBN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728602988916,"user_tz":-60,"elapsed":74863,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"11738c45-b634-4b8f-e25e-b556efac5e4d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 2.654692\n","         Iterations: 198\n","         Function evaluations: 346\n"]}]},{"cell_type":"code","source":["lamb, mu, delta = bates_params\n","print(f\"lamb: {lamb}\\nmu: {mu}\\ndelta: {delta}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tgWz7H7bnXtu","executionInfo":{"status":"ok","timestamp":1728602992081,"user_tz":-60,"elapsed":248,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"96dbd348-b911-4215-df61-1154b074457c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lamb: 2.498136522694097\n","mu: -0.20046701606696993\n","delta: 8.592032717358253e-09\n"]}]},{"cell_type":"code","source":["# Bates model function to calculate call and put prices for a given parameter set (p0)\n","def bates_calculate_model_values(p0):\n","    kappa, theta, sigma, rho, v0, lamb, mu, delta = p0\n","    values = []\n","    for K in strike_prices:\n","        call_model_value = bates_call_value(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        put_model_value = bates_put_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","        values.append(call_model_value)\n","        values.append(put_model_value)\n","    return np.array(values)\n","\n","# Bates jump model (for call pricing only, as per the original)\n","def bates_jump_calculate_model_values(p0):\n","    lamb, mu, delta = p0\n","    values = []\n","    model_value = bates_call_value(S0, K, T, r, v0, theta, kappa, sigma, rho, lamb, mu, delta)\n","    values.append(model_value)\n","    return np.array(values)\n","\n","# Full error function for Bates model calibration\n","def bates_full_error_function(p0):\n","    kappa_v, theta_v, sigma_v, rho, v0, lamb, mu, delta = p0\n","\n","    # Parameter boundary constraints\n","    if (\n","        kappa_v < 0.0 or theta_v < 0.005 or sigma_v < 0.0 or rho < -1.0 or rho > 1.0\n","        or v0 < 0.0 or lamb < 0.0 or mu < -0.6 or mu > 0.0 or delta < 0.0\n","        or 2 * kappa_v * theta_v < sigma_v**2\n","    ):\n","        return 5000.0\n","\n","    # Calculate squared errors for each strike price (call and put)\n","    se = []\n","    for K in strike_prices:\n","        model_call_price = bates_call_value(S0, K, T, r, v0, theta, kappa_v, sigma_v, rho, lamb, mu, delta)\n","        model_put_price = bates_put_price(S0, K, T, r, v0, theta, kappa_v, sigma_v, rho, lamb, mu, delta)\n","        se.append((call_prices[i] - model_call_price) ** 2)\n","        se.append((put_prices[i] - model_put_price) ** 2)\n","\n","    # Calculate the mean squared error (MSE)\n","    MSE = sum(se) / len(se)\n","    global min_MSE\n","    min_MSE = min(min_MSE, MSE)\n","\n","    # Output progress every 25 iterations\n","    if len(se) % 25 == 0:\n","        print(f\"Iteration: {len(se)} | Params: {np.array(p0)} | MSE: {MSE:.3f} | Min MSE: {min_MSE:.3f}\")\n","\n","    # Apply a penalty if local optimization is used\n","    if local_opt:\n","        penalty = np.sqrt(np.sum((p0 - opt1) ** 2))\n","        return MSE + penalty\n","\n","    return MSE\n","\n","# Bates model calibration using fmin optimization\n","def bates_calibration_full():\n","    opt = fmin(\n","        bates_full_error_function, p0, xtol=0.001, ftol=0.001, maxiter=1250, maxfun=650\n","    )\n","    return opt\n"],"metadata":{"id":"DcZALZ0fn6Hy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bates_full_params = bates_calibration_full()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZUfg-x9Dr0kX","executionInfo":{"status":"ok","timestamp":1728603067994,"user_tz":-60,"elapsed":61783,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"f8304cf7-7673-47f9-8290-cd6551fa89a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 53.887009\n","         Iterations: 162\n","         Function evaluations: 371\n"]}]},{"cell_type":"code","source":["kappa, theta, sigma, rho, v0, lamb, mu, delta = bates_full_params\n","print(f\"kappa: {kappa}, theta: {theta}, sigma: {sigma}, rho: {rho}, v0: {v0}, lamb: {lamb}, mu: {mu}, delta: {delta}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTXid0zcvGEX","executionInfo":{"status":"ok","timestamp":1728603072634,"user_tz":-60,"elapsed":231,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"c868561d-7c3a-493b-ab0d-661d5b95261c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["kappa: 0.05343045716380809, theta: 0.010159758750201232, sigma: 8.55772655938557e-11, rho: 0.009792213101874676, v0: 2.1683401576303707, lamb: 0.0002441574546780702, mu: -0.4739937957853051, delta: 0.00013359385083528064\n"]}]},{"cell_type":"markdown","source":["2b. Student A"],"metadata":{"id":"9RDMcMYU-maq"}},{"cell_type":"code","source":["# Obtain initial jump model values\n","params = B96_calibration_short()\n","lamb, mu, delta = params\n","print(f\"lamb: {lamb}\\nmu: {mu}\\ndelta: {delta}\")"],"metadata":{"id":"7VG6e4ru-rGA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728603438478,"user_tz":-60,"elapsed":11370,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"9048f0bb-64f9-417b-ae1f-12454abb36af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 227.534115\n","         Iterations: 254\n","         Function evaluations: 485\n","lamb: 1.5263926582306289\n","mu: -0.5999999999999948\n","delta: 1.3790488620149057e-05\n"]}]},{"cell_type":"code","source":["full_params = B96_calibration_full()\n","kappa, theta, sigma, rho, v0, lamb, mu, delta = full_params\n","print(f\"kappa: {kappa}, theta: {theta}, sigma: {sigma}, rho: {rho}, v0: {v0}, lamb: {lamb}, mu: {mu}, delta: {delta}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PWwgyf56ywRB","executionInfo":{"status":"ok","timestamp":1728603448915,"user_tz":-60,"elapsed":4607,"user":{"displayName":"Anthony P","userId":"11051283623565187711"}},"outputId":"54dea5d6-ea09-440e-b4d8-d9773d87e381"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 2.791972\n","         Iterations: 81\n","         Function evaluations: 183\n","kappa: 0.053949811314472636, theta: 0.008886664824741179, sigma: 8.08526932467149e-11, rho: 0.007360870273463832, v0: 3.605109347096528, lamb: 0.00023629984752374114, mu: -0.5230950366517026, delta: 0.00012342470116309247\n"]}]},{"cell_type":"markdown","source":["2c. Student B"],"metadata":{"id":"a_qHzMfg-xSk"}},{"cell_type":"code","source":["# Define constants\n","S0 = 232.90  # Current stock price\n","r = 0.015    # Risk-free rate\n","T_days = 60  # Maturity in days\n","T = T_days / 250  # Convert days to years\n","\n","# Select only the relevant data for 60 days to maturity\n","call_data = data[(data['Days to maturity'] == 60) & (data['Type'] == 'C')]\n","strike_prices = call_data['Strike'].values\n","call_prices = call_data['Price'].values\n","\n","# Define the parameters for the Bates model\n","v0 = 0.0400\n","theta = 0.0400\n","kappa = 2.0000\n","sigma = 0.1000\n","rho = -0.7000\n","lambda_j = 0.1  # Jump intensity\n","mu_J = 0.0      # Average jump size\n","sigma_J = 0.1   # Volatility of jump sizes\n","\n","# Bates model pricing function\n","def bates_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J):\n","    # Placeholder for Bates model pricing logic\n","    return np.random.rand()  # Replace with actual pricing formula\n","\n","# Objective function to minimize\n","def objective_bates(params):\n","    v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J = params\n","    model_call_prices = [bates_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J) for K in strike_prices]\n","    mse = np.mean((call_prices - model_call_prices) ** 2)\n","    return mse\n","\n","# Initial guess for parameters (including jump parameters)\n","initial_params = [v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J]\n","\n","# Run optimization\n","result_bates = minimize(objective_bates, initial_params, bounds=[(0, 1)]*5 + [(0, 10)]*3)\n","calibrated_params_bates = result_bates.x\n","\n","# Display calibrated parameters\n","print(\"Calibrated Parameters (Bates Model):\")\n","print(f\"v0: {calibrated_params_bates[0]}, theta: {calibrated_params_bates[1]}, kappa: {calibrated_params_bates[2]}, sigma: {calibrated_params_bates[3]}, rho: {calibrated_params_bates[4]}, lambda_j: {calibrated_params_bates[5]}, mu_J: {calibrated_params_bates[6]}, sigma_J: {calibrated_params_bates[7]}\")\n","\n","# Define the characteristic function for the Bates model\n","def bates_characteristic_function(v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J, T, u):\n","    # Implement the characteristic function for the Bates model\n","    return np.exp(-1j * u * S0)  # Placeholder implementation\n","\n","# Carr-Madan pricing function for Bates model\n","def carr_madan_bates_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J):\n","    # Use Carr-Madan method for Bates model\n","    return np.random.rand()  # Replace with actual pricing logic\n","\n","# Objective function for Carr-Madan\n","def objective_carr_madan_bates(params):\n","    v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J = params\n","    model_call_prices = [carr_madan_bates_call_price(S0, K, T, r, v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J) for K in strike_prices]\n","    mse = np.mean((call_prices - model_call_prices) ** 2)\n","    return mse\n","\n","# Run optimization for Carr-Madan Bates model\n","initial_params_carr_madan = [v0, theta, kappa, sigma, rho, lambda_j, mu_J, sigma_J]\n","result_carr_madan_bates = minimize(objective_carr_madan_bates, initial_params_carr_madan, bounds=[(0, 1)]*5 + [(0, 10)]*3)\n","calibrated_params_carr_madan_bates = result_carr_madan_bates.x\n","\n","# Display calibrated parameters for Carr-Madan Bates model\n","print(\"Calibrated Parameters (Carr-Madan Bates Model):\")\n","print(f\"v0: {calibrated_params_carr_madan_bates[0]}, theta: {calibrated_params_carr_madan_bates[1]}, kappa: {calibrated_params_carr_madan_bates[2]}, sigma: {calibrated_params_carr_madan_bates[3]}, rho: {calibrated_params_carr_madan_bates[4]}, lambda_j: {calibrated_params_carr_madan_bates[5]}, mu_J: {calibrated_params_carr_madan_bates[6]}, sigma_J: {calibrated_params_carr_madan_bates[7]}\")\n","\n","# Calculate and print model call prices using Bates model\n","model_call_prices_bates = [bates_call_price(S0, K, T, r, *calibrated_params_bates) for K in strike_prices]\n","\n","print(\"\\nMarket vs Model Call Prices (Bates):\")\n","for K, market, model in zip(strike_prices, call_prices, model_call_prices_bates):\n","    print(f\"Strike: {K}, Market Call: {market}, Model Call: {model}\")\n","\n","# Calculate and print model call prices using Carr-Madan Bates model\n","model_call_prices_carr_madan_bates = [carr_madan_bates_call_price(S0, K, T, r, *calibrated_params_carr_madan_bates) for K in strike_prices]\n","\n","print(\"\\nMarket vs Model Call Prices (Carr-Madan Bates):\")\n","for K, market, model in zip(strike_prices, call_prices, model_call_prices_carr_madan_bates):\n","    print(f\"Strike: {K}, Market Call: {market}, Model Call: {model}\")"],"metadata":{"id":"KadGVTu4-44s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##step 3"],"metadata":{"id":"hLxxdzfk-aId"}},{"cell_type":"code","source":["# Given Euribor rates (in percentage) and maturities (in years)\n","maturities = [1/52, 1/12, 3/12, 6/12, 1]  # 1 week, 1 month, 3 months, 6 months, 12 months\n","rates = [0.648, 0.679, 1.173, 1.809, 2.556]  # Euribor rates\n","\n","# Convert rates to decimals\n","rates = [rate / 100 for rate in rates]\n","\n","# Interpolate using cubic spline\n","cs = CubicSpline(maturities, rates)\n","\n","# Generate weekly rates for a 1-year period (52 weeks)\n","weekly_maturities = np.linspace(1/52, 1, 52)\n","interpolated_rates = cs(weekly_maturities)\n","\n","# Plot the interpolated term structure\n","plt.figure(figsize=(8, 5))\n","plt.plot(weekly_maturities, interpolated_rates, label='Interpolated Euribor Rates')\n","plt.scatter(maturities, rates, color='red', label='Original Euribor Rates')\n","plt.xlabel('Maturity (Years)')\n","plt.ylabel('Euribor Rate')\n","plt.title('Interpolated Euribor Term Structure')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","\n","# Define the CIR model short rate function\n","def cir_yield(params, T):\n","    kappa, theta, sigma = params\n","    A = (2 * kappa * theta) / (sigma**2)\n","    B = (2 * kappa) / ((1 - np.exp(-kappa * T)) * sigma**2)\n","    return A * B\n","\n","# Objective function for CIR model calibration\n","def calibration_objective(params, maturities, rates):\n","    error = 0\n","    for T, rate in zip(maturities, rates):\n","        model_rate = cir_yield(params, T)\n","        error += (model_rate - rate)**2\n","    return error\n","\n","# Initial guess for the parameters\n","initial_params = [0.5, 0.02, 0.1]  # [kappa, theta, sigma]\n","\n","# Calibrate the model\n","result = minimize(calibration_objective, initial_params, args=(weekly_maturities, interpolated_rates), method='L-BFGS-B')\n","\n","# Output the optimized parameters\n","kappa, theta, sigma = result.x\n","print(f\"Calibrated CIR Model Parameters: kappa = {kappa:.4f}, theta = {theta:.4f}, sigma = {sigma:.4f}\")\n","\n","# Simulate future interest rate paths using calibrated CIR model\n","n_simulations = 1000\n","n_steps = 52  # 52 weeks for 1 year\n","dt = 1 / 52  # weekly time step\n","\n","def simulate_cir_paths(kappa, theta, sigma, r0, n_simulations, n_steps, dt):\n","    paths = np.zeros((n_simulations, n_steps + 1))\n","    paths[:, 0] = r0\n","    for t in range(1, n_steps + 1):\n","        z = np.random.standard_normal(n_simulations)\n","        paths[:, t] = paths[:, t-1] + kappa * (theta - paths[:, t-1]) * dt + sigma * np.sqrt(paths[:, t-1]) * np.sqrt(dt) * z\n","        paths[:, t] = np.maximum(paths[:, t], 0)\n","    return paths\n","\n","# Initial short rate (e.g., the 1-week rate)\n","r0 = interpolated_rates[0]\n","cir_paths = simulate_cir_paths(kappa, theta, sigma, r0, n_simulations, n_steps, dt)\n","\n","# Plot some simulated paths\n","plt.figure(figsize=(10, 6))\n","for i in range(10):  # Plot 10 random paths\n","    plt.plot(np.linspace(0, 1, n_steps + 1), cir_paths[i, :], lw=0.8)\n","plt.xlabel('Time (Years)')\n","plt.ylabel('Interest Rate')\n","plt.title('Simulated Interest Rate Paths using Calibrated CIR Model')\n","plt.grid(True)\n","plt.show()"],"metadata":{"id":"nt40LYd_zbDt","executionInfo":{"status":"error","timestamp":1728603619215,"user_tz":-120,"elapsed":452,"user":{"displayName":"Mphikeleli Mbongiseni","userId":"18167562099187738208"}},"outputId":"2c47253e-94e7-48a4-b8a3-1b8e2eeca8ad","colab":{"base_uri":"https://localhost:8080/","height":211}},"execution_count":3,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'CubicSpline' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-a75931bcd551>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Interpolate using cubic spline\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mcs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCubicSpline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaturities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Generate weekly rates for a 1-year period (52 weeks)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'CubicSpline' is not defined"]}]}]}